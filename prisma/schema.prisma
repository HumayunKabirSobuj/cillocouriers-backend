generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum USER_ROLE {
  admin
  marchant
}

enum RESTRICTED_USER_ROLE {
  dispatch
  account
  warehouse
}

enum ParcelType {
  REGULAR
  EXPRESS
}

enum ParcelStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  AWAITING_PICKUP
  IN_TRANSIT
  DELIVERED
  NOT_DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

model User {
  id                      String           @id @default(uuid())
  name                    String
  businessName            String
  address_Pickup_Location String
  phone                   String
  email                   String           @unique
  role                    USER_ROLE
  password                String
  status                  UserStatus       @default(ACTIVE)
  addresses               Address[]
  customers               Customer[]
  parcels                 AddParcel[]
  restrictedUsers         RestrictedUser[]
  BankAccount             BankAccount?
  PaypalAccount           PaypalAccount?
  CardPayment             CardPayment?
  isDeleted               Boolean          @default(false)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model BankAccount {
  id                String   @id @default(uuid())
  marchentId        String   @unique
  accountHolderName String
  accountNumber     String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isDeleted         Boolean  @default(false)

  user User @relation(fields: [marchentId], references: [id])
}

model PaypalAccount {
  id         String   @id @default(uuid())
  marchentId String   @unique
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  user User @relation(fields: [marchentId], references: [id])
}

model CardPayment {
  id         String   @id @default(uuid())
  marchentId String   @unique
  cardNumber String
  expiryDate String
  cvc        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  user User @relation(fields: [marchentId], references: [id])
}

model Address {
  id              String   @id @default(uuid())
  marchentId      String
  addressName     String
  streetName      String
  cityOrSuburb    String
  postalCode      String
  country         String
  phoneNumber     String
  additionalNotes String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)

  user      User        @relation(fields: [marchentId], references: [id])
  AddParcel AddParcel[]
}

model Customer {
  id              String   @id @default(uuid())
  marchentId      String
  Name            String
  Email           String
  Phone           String
  ShippingAddress String
  BillingAddress  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)

  user      User        @relation(fields: [marchentId], references: [id])
  AddParcel AddParcel[]
}

model AddParcel {
  id             String         @id @default(uuid())
  marchentId     String
  type           ParcelType
  name           String
  weight         String
  description    String
  customerId     String
  addressId      String
  invoice        String?
  notes          String?
  pickupDate     DateTime?
  trackingId     String?        @unique
  status         ParcelStatus   @default(PENDING)
  deliveryStatus DeliveryStatus @default(PENDING)
  amount         Float?
  paymentStatus  PaymentStatus  @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isDeleted      Boolean        @default(false)
  address        Address        @relation(fields: [addressId], references: [id])
  user           User           @relation(fields: [marchentId], references: [id])
  customar       Customer       @relation(fields: [customerId], references: [id])
}

model RestrictedUser {
  id                 String    @id @default(uuid())
  marchentId         String
  email              String
  role               RESTRICTED_USER_ROLE
  placeOrders        Boolean
  accessSavedAddress Boolean
  useDefaultAddress  Boolean
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isDeleted          Boolean   @default(false)

  user User @relation(fields: [marchentId], references: [id])
}
